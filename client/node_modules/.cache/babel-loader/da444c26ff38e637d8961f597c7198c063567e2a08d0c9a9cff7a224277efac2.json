{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\CHAT\\\\client\\\\src\\\\components\\\\ChatContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport socketIOClient, { io } from \"socket.io-client\";\nimport ChatBoxReciever, { ChatBoxSender } from \"./ChatBox\";\nimport InputText from \"./InputText\";\nimport UserLogin from \"./UserLogin\";\nimport { doc, setDoc, collection, serverTimestamp, query, onSnapshot, orderBy } from \"firebase/firestore\";\nimport db from \"./firebaseConfig/firebaseConfig\";\n\n// Firebase\n// BAAS(Backend as a service)\n// 앱(ios, android) 및 웹의 백엔드 개발을 도와주기 위해 개발된 서비스로 프론트 쪽에 집중하며 빠르게 앱을 개발할 수 있도록 지원해주는 툴\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatContainer() {\n  _s();\n  const socketio = io.connect(\"http://192.168.0.120:9999\");\n  const [chats, setChats] = useState([]);\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\n  const [roomNo, setRoomNo] = useState(localStorage.getItem(\"roomNo\"));\n  const [allChatList, setAllChatList] = useState([]);\n  // store의 데이터베이스 짜임 : Collention(폴더) - Document(파일) - field(data)\n  const chatsRef = collection(db, \"Message\");\n  // useRef() : 컴포넌트 별로 특정 데이터를 가지게 하고, 이러한 데이터들을 리렌더링없이 관리하고 싶을 때 사용\n  const messageEndRef = useRef(null);\n\n  // useEffect : 컴포넌트가 렌더링 될 때마다 특정 작업을 실행할 수 있도록 하는 Hook\n  // 함수 컴포넌트가 어떤 값을 유지할 수 있도록 '캐시'를 만들었다. 이 캐시를 이용하고자 만든 여러 개의 API를 '리액트 훅'함수라고 부른다.\n  // 예시 : useState, useEffect\n\n  useEffect(() => {\n    socketio.on(\"chat\", data => {\n      setAllChatList(prev => [...prev, data]);\n    });\n  });\n\n  // useEffect(() => {\n  //   const q = query(chatsRef, orderBy(\"createdAt\", \"asc\"));\n\n  //   // onSnapshot : 실시간으로 정보 가져오기\n  //   const unsub = onSnapshot(q, (querySnapshot) => {\n  //     const fireChats = [];\n  //     // querySnapshot : Collection으로부터 Query,snapshot을 통해 받아온 데이터 타입\n  //     // Collection으로부터 특정 Document들을 가져왔기 때문에 하나씩 풀어야 한다\n  //     // docs : QuerySnapshot의 내부 데이터 리스트에 접근\n  //     querySnapshot.forEach((doc) => {\n  //       fireChats.push(doc.data()); // data : 실제 데이터가 들어있음\n  //     });\n  //     setChats([...fireChats]);\n  //   });\n  //   return () => {\n  //     unsub();\n  //   };\n  // }, []);\n\n  // function addToFirebase(chat) {\n  //   const newChat = {\n  //     roomNo: roomNo,\n  //     createdAt: serverTimestamp(),\n  //     user,\n  //     message: chat.message,\n  //   };\n  //   const chatRef = doc(chatsRef);\n  //   setDoc(chatRef, newChat)\n  //     .then(() => console.log(\"chat added succesfully\"))\n  //     .catch(console.log);\n  // }\n\n  function sendChatToSocket(allChatList) {\n    socketio.emit(\"chat\", allChatList);\n  }\n  function addMessage(chats) {\n    const newChat = {\n      ...chats,\n      user: localStorage.getItem(\"user\"),\n      roomNo\n    };\n    setChats([...chats, newChat]);\n    sendChatToSocket([...chats, newChat]);\n  }\n  function logout() {\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"roomNo\");\n    setUser(\"\");\n  }\n  useEffect(() => {\n    let chat = document.querySelector(\"#divElement\");\n    chat.scrollTop = chat.scrollHeight;\n  }, [chats]);\n  function ChatsList() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"divElement\",\n      style: {\n        height: \"75vh\",\n        overflow: \"scroll\",\n        overflowX: \"hidden\"\n      },\n      children: [chats.filter(msg => msg.roomNo === roomNo).map((chat, index) => {\n        if (chat.user === user && chat.roomNo === roomNo) return /*#__PURE__*/_jsxDEV(ChatBoxSender, {\n          message: chat.message,\n          user: chat.user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this);\n        return /*#__PURE__*/_jsxDEV(ChatBoxReciever, {\n          message: chat.message,\n          user: chat.user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messageEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Username:\", user]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"roomNo:\", roomNo]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => logout(),\n          style: {\n            color: \"blue\",\n            curosr: \"pointer\"\n          },\n          children: \"logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatsList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InputText, {\n        addMessage: addMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(UserLogin, {\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatContainer, \"TjyEOTxaDqoRHjaZ4+A8gUQkaZc=\");\n_c = ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useEffect","useState","useRef","socketIOClient","io","ChatBoxReciever","ChatBoxSender","InputText","UserLogin","doc","setDoc","collection","serverTimestamp","query","onSnapshot","orderBy","db","ChatContainer","socketio","connect","chats","setChats","user","setUser","localStorage","getItem","roomNo","setRoomNo","allChatList","setAllChatList","chatsRef","messageEndRef","on","data","prev","sendChatToSocket","emit","addMessage","newChat","logout","removeItem","chat","document","querySelector","scrollTop","scrollHeight","ChatsList","height","overflow","overflowX","filter","msg","map","index","message","display","flexDirection","justifyContent","color","curosr"],"sources":["C:/Dev/CHAT/client/src/components/ChatContainer.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport socketIOClient, { io } from \"socket.io-client\";\r\nimport ChatBoxReciever, { ChatBoxSender } from \"./ChatBox\";\r\nimport InputText from \"./InputText\";\r\nimport UserLogin from \"./UserLogin\";\r\nimport {\r\n  doc,\r\n  setDoc,\r\n  collection,\r\n  serverTimestamp,\r\n  query,\r\n  onSnapshot,\r\n  orderBy,\r\n} from \"firebase/firestore\";\r\nimport db from \"./firebaseConfig/firebaseConfig\";\r\n\r\n// Firebase\r\n// BAAS(Backend as a service)\r\n// 앱(ios, android) 및 웹의 백엔드 개발을 도와주기 위해 개발된 서비스로 프론트 쪽에 집중하며 빠르게 앱을 개발할 수 있도록 지원해주는 툴\r\n\r\nexport default function ChatContainer() {\r\n  const socketio = io.connect(\"http://192.168.0.120:9999\");\r\n  const [chats, setChats] = useState([]);\r\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\r\n  const [roomNo, setRoomNo] = useState(localStorage.getItem(\"roomNo\"));\r\n  const [allChatList, setAllChatList] = useState([]);\r\n  // store의 데이터베이스 짜임 : Collention(폴더) - Document(파일) - field(data)\r\n  const chatsRef = collection(db, \"Message\");\r\n  // useRef() : 컴포넌트 별로 특정 데이터를 가지게 하고, 이러한 데이터들을 리렌더링없이 관리하고 싶을 때 사용\r\n  const messageEndRef = useRef(null);\r\n\r\n  // useEffect : 컴포넌트가 렌더링 될 때마다 특정 작업을 실행할 수 있도록 하는 Hook\r\n  // 함수 컴포넌트가 어떤 값을 유지할 수 있도록 '캐시'를 만들었다. 이 캐시를 이용하고자 만든 여러 개의 API를 '리액트 훅'함수라고 부른다.\r\n  // 예시 : useState, useEffect\r\n\r\n\r\n  useEffect(() => {\r\n    socketio.on(\"chat\", (data) => {\r\n      setAllChatList((prev)=>[...prev, data])\r\n    });\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //   const q = query(chatsRef, orderBy(\"createdAt\", \"asc\"));\r\n\r\n  //   // onSnapshot : 실시간으로 정보 가져오기\r\n  //   const unsub = onSnapshot(q, (querySnapshot) => {\r\n  //     const fireChats = [];\r\n  //     // querySnapshot : Collection으로부터 Query,snapshot을 통해 받아온 데이터 타입\r\n  //     // Collection으로부터 특정 Document들을 가져왔기 때문에 하나씩 풀어야 한다\r\n  //     // docs : QuerySnapshot의 내부 데이터 리스트에 접근\r\n  //     querySnapshot.forEach((doc) => {\r\n  //       fireChats.push(doc.data()); // data : 실제 데이터가 들어있음\r\n  //     });\r\n  //     setChats([...fireChats]);\r\n  //   });\r\n  //   return () => {\r\n  //     unsub();\r\n  //   };\r\n  // }, []);\r\n\r\n  // function addToFirebase(chat) {\r\n  //   const newChat = {\r\n  //     roomNo: roomNo,\r\n  //     createdAt: serverTimestamp(),\r\n  //     user,\r\n  //     message: chat.message,\r\n  //   };\r\n  //   const chatRef = doc(chatsRef);\r\n  //   setDoc(chatRef, newChat)\r\n  //     .then(() => console.log(\"chat added succesfully\"))\r\n  //     .catch(console.log);\r\n  // }\r\n\r\n  function sendChatToSocket(allChatList) {\r\n    socketio.emit(\"chat\", allChatList);\r\n  }\r\n\r\n  function addMessage(chats) {\r\n    const newChat = { ...chats, user: localStorage.getItem(\"user\"), roomNo };\r\n    setChats([...chats, newChat]);\r\n    sendChatToSocket([...chats, newChat]);\r\n  }\r\n\r\n  function logout() {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"roomNo\");\r\n    setUser(\"\");\r\n  }\r\n    useEffect(() => {\r\n      let chat = document.querySelector(\"#divElement\");\r\n      chat.scrollTop = chat.scrollHeight;\r\n    }, [chats]);\r\n\r\n  function ChatsList() {\r\n    return (\r\n      <div id = \"divElement\"\r\n      style={{ height: \"75vh\", overflow: \"scroll\", overflowX: \"hidden\" }}>\r\n        {chats.filter((msg) => msg.roomNo === roomNo)\r\n              .map((chat, index) => {\r\n          if (chat.user === user && chat.roomNo === roomNo)\r\n            return (\r\n              <ChatBoxSender\r\n                key={index}\r\n                message={chat.message}\r\n                user={chat.user}\r\n              />\r\n            );\r\n          return (\r\n            <ChatBoxReciever\r\n              key={index}\r\n              message={chat.message}\r\n              user={chat.user}\r\n            />\r\n          );\r\n        })}\r\n        <div ref={messageEndRef} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {user ? (\r\n        <div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <h4>Username:{user}</h4>\r\n            <h4>roomNo:{roomNo}</h4>\r\n            <p\r\n              onClick={() => logout()}\r\n              style={{ color: \"blue\", curosr: \"pointer\" }}\r\n            >\r\n              logout\r\n            </p>\r\n          </div>\r\n          <ChatsList />\r\n          <InputText addMessage={addMessage} />\r\n        </div>\r\n      ) : (\r\n        <UserLogin setUser={setUser} />\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}