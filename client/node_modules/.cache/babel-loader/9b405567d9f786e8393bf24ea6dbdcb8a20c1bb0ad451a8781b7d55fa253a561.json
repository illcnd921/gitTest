{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\CHAT\\\\client\\\\src\\\\components\\\\ChatContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport io, { Socket } from \"socket.io-client\";\nimport ChatBoxReciever, { ChatBoxSender } from \"./ChatBox\";\nimport InputText from \"./InputText\";\nimport UserLogin from \"./UserLogin\";\nimport { doc, setDoc, collection, serverTimestamp, query, onSnapshot, orderBy } from \"firebase/firestore\";\nimport db from \"./firebaseConfig/firebaseConfig\";\n\n// Firebase\n// BAAS(Backend as a service)\n// 앱(ios, android) 및 웹의 백엔드 개발을 도와주기 위해 개발된 서비스로 프론트 쪽에 집중하며 빠르게 앱을 개발할 수 있도록 지원해주는 툴\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatContainer() {\n  _s();\n  const socketio = io.connect(\"http://192.168.0.120:9999\");\n  const [chatScreen, setChatScreen] = useState(false);\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\n  const [roomNo, setRoomNo] = useState(localStorage.getItem(\"roomNo\"));\n  const [messageList, setMessageList] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  console.log(messageList);\n  console.log(newMessage);\n  console.log(roomNo);\n\n  // store의 데이터베이스 짜임 : Collention(폴더) - Document(파일) - field(data)\n  // const chatsRef = collection(db, \"Message\");\n  // useRef() : 컴포넌트 별로 특정 데이터를 가지게 하고, 이러한 데이터들을 리렌더링없이 관리하고 싶을 때 사용\n  const messageEndRef = useRef(null);\n\n  // useEffect : 컴포넌트가 렌더링 될 때마다 특정 작업을 실행할 수 있도록 하는 Hook\n  // 함수 컴포넌트가 어떤 값을 유지할 수 있도록 '캐시'를 만들었다. 이 캐시를 이용하고자 만든 여러 개의 API를 '리액트 훅'함수라고 부른다.\n  // 예시 : useState, useEffect\n\n  // useEffect(() => {\n  //   const q = query(chatsRef, orderBy(\"createdAt\", \"asc\"));\n\n  //   // onSnapshot : 실시간으로 정보 가져오기\n  //   const unsub = onSnapshot(q, (querySnapshot) => {\n  //     const fireChats = [];\n  //     // querySnapshot : Collection으로부터 Query,snapshot을 통해 받아온 데이터 타입\n  //     // Collection으로부터 특정 Document들을 가져왔기 때문에 하나씩 풀어야 한다\n  //     // docs : QuerySnapshot의 내부 데이터 리스트에 접근\n  //     querySnapshot.forEach((doc) => {\n  //       fireChats.push(doc.data()); // data : 실제 데이터가 들어있음\n  //     });\n  //     setChats([...fireChats]);\n  //   });\n  //   return () => {\n  //     unsub();\n  //   };\n  // }, []);\n\n  // function addToFirebase(chat) {\n  //   const newChat = {\n  //     roomNo: roomNo,\n  //     createdAt: serverTimestamp(),\n  //     user,\n  //     message: chat.message,\n  //   };\n  //   const chatRef = doc(chatsRef);\n  //   setDoc(chatRef, newChat)\n  //     .then(() => console.log(\"chat added succesfully\"))\n  //     .catch(console.log);\n  // }\n\n  // function sendChatToSocket(message) {\n  //   socketio.emit(\"message\", message);\n  // }\n\n  // async function addMessage () {\n  //   const messageContent = {\n  //     user: user,\n  //     message: newMessage,\n  //     roomNo: roomNo,\n  //     date:\n  //       new Date(Date.now()).getHours() +\n  //       \":\" +\n  //       new Date(Date.now()).getMinutes(),\n  //   };\n  //   // messageContent 값이 먼저 정의 된 후 메세지 전달.\n  //   await socketio.emit(\"message\", messageContent);\n  //   // 메세지 리스트에 방금 보낸 메세지도 함께 추가.\n  //   setMessageList((prev) => [...prev, newMessage]);\n  //   setMessage(\"\");\n  // }\n\n  function logout() {\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"roomNo\");\n    setUser(\"\");\n  }\n  useEffect(() => {\n    socketio.emit(\"room\", roomNo);\n    setChatScreen(true);\n    socketio.on(\"return\", data => {\n      console.log(data, \"client\");\n      setMessageList(prev => [...prev, data]);\n    });\n  }, [socketio]);\n  function ChatsList() {\n    const divElement = document.querySelector(\"#divElement\");\n    divElement.scrollTop = divElement.scrollHeight;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"divElement\",\n      style: {\n        height: \"75vh\",\n        overflow: \"scroll\",\n        overflowX: \"hidden\"\n      },\n      children: [messageList && messageList.map((msg, index) => {\n        if (msg.user === user) {\n          return /*#__PURE__*/_jsxDEV(ChatBoxSender, {\n            message: newMessage,\n            user: user\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(ChatBoxReciever, {\n          message: msg,\n          user: msg.user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messageEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: chatScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Username:\", user]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"roomNo:\", roomNo]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => logout(),\n          style: {\n            color: \"blue\",\n            curosr: \"pointer\"\n          },\n          children: \"logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatsList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InputText, {\n        setNewMessage: setNewMessage,\n        setMessageList: setMessageList,\n        user: user,\n        roomNo: roomNo,\n        chatScreen: chatScreen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(UserLogin, {\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatContainer, \"cwhr+knhR29cAAQ6TOdntr9BGsU=\");\n_c = ChatContainer;\nvar _c;\n$RefreshReg$(_c, \"ChatContainer\");","map":{"version":3,"names":["React","useEffect","useState","useRef","io","Socket","ChatBoxReciever","ChatBoxSender","InputText","UserLogin","doc","setDoc","collection","serverTimestamp","query","onSnapshot","orderBy","db","ChatContainer","socketio","connect","chatScreen","setChatScreen","user","setUser","localStorage","getItem","roomNo","setRoomNo","messageList","setMessageList","newMessage","setNewMessage","console","log","messageEndRef","logout","removeItem","emit","on","data","prev","ChatsList","divElement","document","querySelector","scrollTop","scrollHeight","height","overflow","overflowX","map","msg","index","display","flexDirection","justifyContent","color","curosr"],"sources":["C:/Dev/CHAT/client/src/components/ChatContainer.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport io, { Socket }  from \"socket.io-client\";\r\nimport ChatBoxReciever, { ChatBoxSender } from \"./ChatBox\";\r\nimport InputText from \"./InputText\";\r\nimport UserLogin from \"./UserLogin\";\r\nimport {\r\n  doc,\r\n  setDoc,\r\n  collection,\r\n  serverTimestamp,\r\n  query,\r\n  onSnapshot,\r\n  orderBy,\r\n} from \"firebase/firestore\";\r\nimport db from \"./firebaseConfig/firebaseConfig\";\r\n\r\n// Firebase\r\n// BAAS(Backend as a service)\r\n// 앱(ios, android) 및 웹의 백엔드 개발을 도와주기 위해 개발된 서비스로 프론트 쪽에 집중하며 빠르게 앱을 개발할 수 있도록 지원해주는 툴\r\n\r\nexport default function ChatContainer() {\r\n  const socketio = io.connect(\"http://192.168.0.120:9999\");\r\n  const [chatScreen, setChatScreen] = useState(false);\r\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\r\n  const [roomNo, setRoomNo] = useState(localStorage.getItem(\"roomNo\"));\r\n  const [messageList, setMessageList] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  console.log(messageList);\r\n  console.log(newMessage);\r\n  console.log(roomNo);\r\n\r\n\r\n  // store의 데이터베이스 짜임 : Collention(폴더) - Document(파일) - field(data)\r\n  // const chatsRef = collection(db, \"Message\");\r\n  // useRef() : 컴포넌트 별로 특정 데이터를 가지게 하고, 이러한 데이터들을 리렌더링없이 관리하고 싶을 때 사용\r\n  const messageEndRef = useRef(null);\r\n\r\n  // useEffect : 컴포넌트가 렌더링 될 때마다 특정 작업을 실행할 수 있도록 하는 Hook\r\n  // 함수 컴포넌트가 어떤 값을 유지할 수 있도록 '캐시'를 만들었다. 이 캐시를 이용하고자 만든 여러 개의 API를 '리액트 훅'함수라고 부른다.\r\n  // 예시 : useState, useEffect\r\n\r\n  \r\n  // useEffect(() => {\r\n  //   const q = query(chatsRef, orderBy(\"createdAt\", \"asc\"));\r\n\r\n  //   // onSnapshot : 실시간으로 정보 가져오기\r\n  //   const unsub = onSnapshot(q, (querySnapshot) => {\r\n  //     const fireChats = [];\r\n  //     // querySnapshot : Collection으로부터 Query,snapshot을 통해 받아온 데이터 타입\r\n  //     // Collection으로부터 특정 Document들을 가져왔기 때문에 하나씩 풀어야 한다\r\n  //     // docs : QuerySnapshot의 내부 데이터 리스트에 접근\r\n  //     querySnapshot.forEach((doc) => {\r\n  //       fireChats.push(doc.data()); // data : 실제 데이터가 들어있음\r\n  //     });\r\n  //     setChats([...fireChats]);\r\n  //   });\r\n  //   return () => {\r\n  //     unsub();\r\n  //   };\r\n  // }, []);\r\n  \r\n  // function addToFirebase(chat) {\r\n  //   const newChat = {\r\n    //     roomNo: roomNo,\r\n  //     createdAt: serverTimestamp(),\r\n  //     user,\r\n  //     message: chat.message,\r\n  //   };\r\n  //   const chatRef = doc(chatsRef);\r\n  //   setDoc(chatRef, newChat)\r\n  //     .then(() => console.log(\"chat added succesfully\"))\r\n  //     .catch(console.log);\r\n  // }\r\n  \r\n  // function sendChatToSocket(message) {\r\n  //   socketio.emit(\"message\", message);\r\n  // }\r\n\r\n  // async function addMessage () {\r\n  //   const messageContent = {\r\n  //     user: user,\r\n  //     message: newMessage,\r\n  //     roomNo: roomNo,\r\n  //     date:\r\n  //       new Date(Date.now()).getHours() +\r\n  //       \":\" +\r\n  //       new Date(Date.now()).getMinutes(),\r\n  //   };\r\n  //   // messageContent 값이 먼저 정의 된 후 메세지 전달.\r\n  //   await socketio.emit(\"message\", messageContent);\r\n  //   // 메세지 리스트에 방금 보낸 메세지도 함께 추가.\r\n  //   setMessageList((prev) => [...prev, newMessage]);\r\n  //   setMessage(\"\");\r\n  // }\r\n\r\n\r\n  function logout() {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"roomNo\");\r\n    setUser(\"\");\r\n  }\r\n  \r\n  useEffect(() => {\r\n    socketio.emit(\"room\", roomNo);\r\n    setChatScreen(true);\r\n    socketio.on(\"return\", (data) => {\r\n      console.log(data , \"client\")   \r\n      setMessageList((prev) => [...prev, data])\r\n    });\r\n  },[socketio]);\r\n    \r\n  \r\n  \r\n  function ChatsList() {\r\n      const divElement = document.querySelector(\"#divElement\");\r\n      divElement.scrollTop = divElement.scrollHeight;\r\n    return (\r\n      <div id = \"divElement\"\r\n        style={{ height: \"75vh\", overflow: \"scroll\", overflowX: \"hidden\" }}>\r\n        {messageList &&\r\n          messageList.map((msg, index) => {\r\n          if (msg.user === user) {\r\n            return (\r\n              <ChatBoxSender\r\n                key={index}\r\n                message={newMessage}\r\n                user={user}\r\n              />\r\n            )} \r\n          return (\r\n            <ChatBoxReciever\r\n              key={index}\r\n              message={msg }\r\n              user={msg.user}\r\n            />\r\n          );\r\n        })}\r\n        <div ref={messageEndRef} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {chatScreen ? (\r\n        <div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <h4>Username:{user}</h4>\r\n            <h4>roomNo:{roomNo}</h4>\r\n            <p\r\n              onClick={() => logout()}\r\n              style={{ color: \"blue\", curosr: \"pointer\" }}\r\n            >\r\n              logout\r\n            </p>\r\n          </div>\r\n          <ChatsList />\r\n          <InputText  setNewMessage={setNewMessage} setMessageList={setMessageList} user = {user} roomNo={roomNo} chatScreen={chatScreen}/>\r\n        </div>\r\n      ) : (\r\n        <UserLogin setUser={setUser} />\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}