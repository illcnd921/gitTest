{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\04.front\\\\CHAT\\\\client\\\\src\\\\App.js\";\nimport ChatContainer from \"./components/ChatContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const express = require(\"express\");\n  const http = require(\"http\");\n  const {\n    Socket\n  } = require(\"socket.io\");\n  const Server = require(\"socket.io\").Server;\n  const app = express();\n  // path 모듈은 운영체제별로 경로 구분자가 달라 생기는 문제를 해결하기 위해 생겼다\n  const path = require(\"path\");\n  const server = http.createServer(app);\n\n  // io : 서버 객체, socket : 클라이언트 객체\n  // cors : 크로스 도메인\n  const io = new Server(server, {\n    cors: {\n      origin: \"*\"\n    }\n  });\n\n  // path.dirname(file) : 현재 파일이 위치한 폴더 경로를 보여줌\n  const _dirname = path.dirname(\"\");\n  const buildPath = path.join(_dirname, \"../client/build\");\n  app.use(express.static(buildPath));\n  app.get(\"/*\", function (req, res) {\n    res.sendFile(path.join(_dirname, \"../client/build/index.html\"),\n    // path.join([path]) : 경로들을 String으로 받아 합친다\n    function (err) {\n      if (err) {\n        res.status(500).send(err);\n      }\n    });\n  });\n  // on : 이벤트를 받는 메소드, emit : 이벤트를 보내는 메서드\n  // io.on(\"connection\", callback) : 서버가 connection 이벤트를 받으면 콜백함수를 수행한다\n  io.on(\"connection\", Socket => {\n    console.log(\"We are connected\");\n    Socket.on(\"chat\", chat => {\n      io.emit(\"chat\", chat);\n    });\n    Socket.on(\"disconnect\", () => {\n      console.log(\"disconnected\");\n    });\n  });\n  app.listen(5001, () => console.log(\"Listening to port 5001\"));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: \"#ece5dd\",\n      height: \"100vh\",\n      padding: 10\n    },\n    children: /*#__PURE__*/_jsxDEV(ChatContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ChatContainer","App","express","require","http","Socket","Server","app","path","server","createServer","io","cors","origin","_dirname","dirname","buildPath","join","use","static","get","req","res","sendFile","err","status","send","on","console","log","chat","emit","listen","backgroundColor","height","padding"],"sources":["C:/Dev/04.front/CHAT/client/src/App.js"],"sourcesContent":["import ChatContainer from \"./components/ChatContainer\";\n\nfunction App() {\n  const express = require(\"express\");\n  const http = require(\"http\");\n  const { Socket } = require(\"socket.io\");\n  const Server = require(\"socket.io\").Server;\n  const app = express();\n  // path 모듈은 운영체제별로 경로 구분자가 달라 생기는 문제를 해결하기 위해 생겼다\n  const path = require(\"path\");\n\n  const server = http.createServer(app);\n\n  // io : 서버 객체, socket : 클라이언트 객체\n  // cors : 크로스 도메인\n  const io = new Server(server, {\n    cors: {\n      origin: \"*\",\n    },\n  });\n\n  // path.dirname(file) : 현재 파일이 위치한 폴더 경로를 보여줌\n  const _dirname = path.dirname(\"\");\n  const buildPath = path.join(_dirname, \"../client/build\");\n\n  app.use(express.static(buildPath));\n\n  app.get(\"/*\", function (req, res) {\n    res.sendFile(\n      path.join(_dirname, \"../client/build/index.html\"), // path.join([path]) : 경로들을 String으로 받아 합친다\n      function (err) {\n        if (err) {\n          res.status(500).send(err);\n        }\n      }\n    );\n  });\n  // on : 이벤트를 받는 메소드, emit : 이벤트를 보내는 메서드\n  // io.on(\"connection\", callback) : 서버가 connection 이벤트를 받으면 콜백함수를 수행한다\n  io.on(\"connection\", (Socket) => {\n    console.log(\"We are connected\");\n\n    Socket.on(\"chat\", (chat) => {\n      io.emit(\"chat\", chat);\n    });\n\n    Socket.on(\"disconnect\", () => {\n      console.log(\"disconnected\");\n    });\n  });\n\n  app.listen(5001, () => console.log(\"Listening to port 5001\"));\n\n  return (\n    <div style={{ backgroundColor: \"#ece5dd\", height: \"100vh\", padding: 10 }}>\n      <ChatContainer />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,aAAa,MAAM,4BAA4B;AAAC;AAEvD,SAASC,GAAG,GAAG;EACb,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;EAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;EAC5B,MAAM;IAAEE;EAAO,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;EACvC,MAAMG,MAAM,GAAGH,OAAO,CAAC,WAAW,CAAC,CAACG,MAAM;EAC1C,MAAMC,GAAG,GAAGL,OAAO,EAAE;EACrB;EACA,MAAMM,IAAI,GAAGL,OAAO,CAAC,MAAM,CAAC;EAE5B,MAAMM,MAAM,GAAGL,IAAI,CAACM,YAAY,CAACH,GAAG,CAAC;;EAErC;EACA;EACA,MAAMI,EAAE,GAAG,IAAIL,MAAM,CAACG,MAAM,EAAE;IAC5BG,IAAI,EAAE;MACJC,MAAM,EAAE;IACV;EACF,CAAC,CAAC;;EAEF;EACA,MAAMC,QAAQ,GAAGN,IAAI,CAACO,OAAO,CAAC,EAAE,CAAC;EACjC,MAAMC,SAAS,GAAGR,IAAI,CAACS,IAAI,CAACH,QAAQ,EAAE,iBAAiB,CAAC;EAExDP,GAAG,CAACW,GAAG,CAAChB,OAAO,CAACiB,MAAM,CAACH,SAAS,CAAC,CAAC;EAElCT,GAAG,CAACa,GAAG,CAAC,IAAI,EAAE,UAAUC,GAAG,EAAEC,GAAG,EAAE;IAChCA,GAAG,CAACC,QAAQ,CACVf,IAAI,CAACS,IAAI,CAACH,QAAQ,EAAE,4BAA4B,CAAC;IAAE;IACnD,UAAUU,GAAG,EAAE;MACb,IAAIA,GAAG,EAAE;QACPF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACF,GAAG,CAAC;MAC3B;IACF,CAAC,CACF;EACH,CAAC,CAAC;EACF;EACA;EACAb,EAAE,CAACgB,EAAE,CAAC,YAAY,EAAGtB,MAAM,IAAK;IAC9BuB,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAE/BxB,MAAM,CAACsB,EAAE,CAAC,MAAM,EAAGG,IAAI,IAAK;MAC1BnB,EAAE,CAACoB,IAAI,CAAC,MAAM,EAAED,IAAI,CAAC;IACvB,CAAC,CAAC;IAEFzB,MAAM,CAACsB,EAAE,CAAC,YAAY,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFtB,GAAG,CAACyB,MAAM,CAAC,IAAI,EAAE,MAAMJ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC,CAAC;EAE7D,oBACE;IAAK,KAAK,EAAE;MAAEI,eAAe,EAAE,SAAS;MAAEC,MAAM,EAAE,OAAO;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAA,uBACvE,QAAC,aAAa;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACb;AAEV;AAAC,KAxDQlC,GAAG;AA0DZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}