{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\CHAT\\\\client\\\\src\\\\components\\\\InputText.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  button: {\n    width: \"10%\",\n    height: 50,\n    fontWeight: \"bold\",\n    borderRadius: 10,\n    fontSize: 18,\n    backgroundColor: \"#34b7f1\",\n    borderWidth: 0,\n    color: \"#fff\"\n  },\n  textarea: {\n    width: \"60%\",\n    height: 50,\n    borderRadius: 10,\n    borderWidth: 0,\n    padding: 10,\n    fontSize: 18\n  },\n  textContainer: {\n    display: \"flex\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\"\n  }\n};\nexport default function InputText(_ref) {\n  _s();\n  let {\n    setNewMessage,\n    setMessageList,\n    user,\n    roomNo\n  } = _ref;\n  const [message, setMessage] = useState(\"\");\n  const socketio = io.connect(\"http://192.168.0.120:9999\");\n  function forSetMessage(e) {\n    e.preventdefult();\n    setMessage(e.target.value);\n  }\n  async function sendMessage() {\n    setNewMessage(message);\n    const messageContent = {\n      user: user,\n      message: message,\n      roomNo: roomNo,\n      date: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes()\n    };\n    // messageContent 값이 먼저 정의 된 후 메세지 전달.\n    await socketio.emit(\"message\", messageContent);\n    // 메세지 리스트에 방금 보낸 메세지도 함께 추가.\n    setMessageList(prev => [...prev, message]);\n    setMessage(\"\");\n  }\n  function textareaAddMessage() {\n    document.getElementById('textarea').addEventListener(\"keydown\", function (e) {\n      if (e.keyCode === 13) {\n        sendMessage();\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.textContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"textarea\",\n      style: styles.textarea,\n      rows: 6,\n      placeholder: \"write something...\",\n      value: message,\n      onChange: e => forSetMessage(e),\n      onKeyDown: () => textareaAddMessage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => sendMessage(e),\n      style: styles.button,\n      children: \"ENTER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(InputText, \"EiOGSxO4GWQlH0sM782nQ9JwuAs=\");\n_c = InputText;\nvar _c;\n$RefreshReg$(_c, \"InputText\");","map":{"version":3,"names":["React","useState","io","styles","button","width","height","fontWeight","borderRadius","fontSize","backgroundColor","borderWidth","color","textarea","padding","textContainer","display","justifyContent","alignItems","InputText","setNewMessage","setMessageList","user","roomNo","message","setMessage","socketio","connect","forSetMessage","e","preventdefult","target","value","sendMessage","messageContent","date","Date","now","getHours","getMinutes","emit","prev","textareaAddMessage","document","getElementById","addEventListener","keyCode"],"sources":["C:/Dev/CHAT/client/src/components/InputText.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst styles = {\r\n  button: {\r\n    width: \"10%\",\r\n    height: 50,\r\n    fontWeight: \"bold\",\r\n    borderRadius: 10,\r\n    fontSize: 18,\r\n    backgroundColor: \"#34b7f1\",\r\n    borderWidth: 0,\r\n    color: \"#fff\",\r\n  },\r\n  textarea: {\r\n    width: \"60%\",\r\n    height: 50,\r\n    borderRadius: 10,\r\n    borderWidth: 0,\r\n    padding: 10,\r\n    fontSize: 18,\r\n  },\r\n  textContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n    alignItems: \"center\",\r\n  },\r\n};\r\n\r\nexport default function InputText({ setNewMessage, setMessageList, user, roomNo }) {\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const socketio = io.connect(\"http://192.168.0.120:9999\");\r\n\r\n  function forSetMessage (e){\r\n    e.preventdefult();\r\n    setMessage(e.target.value)\r\n  }\r\n\r\n  async function sendMessage() {\r\n    setNewMessage(message)\r\n    const messageContent = {\r\n          user: user,\r\n          message: message,\r\n          roomNo: roomNo,\r\n          date:\r\n            new Date(Date.now()).getHours() +\r\n            \":\" +\r\n            new Date(Date.now()).getMinutes(),\r\n        };\r\n        // messageContent 값이 먼저 정의 된 후 메세지 전달.\r\n        await socketio.emit(\"message\", messageContent);\r\n        // 메세지 리스트에 방금 보낸 메세지도 함께 추가.\r\n        setMessageList((prev) => [...prev, message]);\r\n    setMessage(\"\");\r\n  }\r\n\r\n  function textareaAddMessage() {\r\n    document.getElementById('textarea').addEventListener(\"keydown\", function(e){\r\n      if(e.keyCode === 13) {\r\n        sendMessage();\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div style={styles.textContainer}>\r\n      <textarea\r\n        id = \"textarea\"\r\n        style={styles.textarea}\r\n        rows={6}\r\n        placeholder=\"write something...\"\r\n        value={message}\r\n        onChange={(e) => forSetMessage(e)}\r\n        onKeyDown={() => textareaAddMessage()}\r\n      ></textarea>\r\n      <button onClick={(e) => sendMessage(e)} style={styles.button}>\r\n        ENTER\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,EAAE,QAAQ,kBAAkB;AAAC;AAEtC,MAAMC,MAAM,GAAG;EACbC,MAAM,EAAE;IACNC,KAAK,EAAE,KAAK;IACZC,MAAM,EAAE,EAAE;IACVC,UAAU,EAAE,MAAM;IAClBC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,EAAE;IACZC,eAAe,EAAE,SAAS;IAC1BC,WAAW,EAAE,CAAC;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRR,KAAK,EAAE,KAAK;IACZC,MAAM,EAAE,EAAE;IACVE,YAAY,EAAE,EAAE;IAChBG,WAAW,EAAE,CAAC;IACdG,OAAO,EAAE,EAAE;IACXL,QAAQ,EAAE;EACZ,CAAC;EACDM,aAAa,EAAE;IACbC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE,cAAc;IAC9BC,UAAU,EAAE;EACd;AACF,CAAC;AAED,eAAe,SAASC,SAAS,OAAkD;EAAA;EAAA,IAAjD;IAAEC,aAAa;IAAEC,cAAc;IAAEC,IAAI;IAAEC;EAAO,CAAC;EAC/E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMyB,QAAQ,GAAGxB,EAAE,CAACyB,OAAO,CAAC,2BAA2B,CAAC;EAExD,SAASC,aAAa,CAAEC,CAAC,EAAC;IACxBA,CAAC,CAACC,aAAa,EAAE;IACjBL,UAAU,CAACI,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;EAC5B;EAEA,eAAeC,WAAW,GAAG;IAC3Bb,aAAa,CAACI,OAAO,CAAC;IACtB,MAAMU,cAAc,GAAG;MACjBZ,IAAI,EAAEA,IAAI;MACVE,OAAO,EAAEA,OAAO;MAChBD,MAAM,EAAEA,MAAM;MACdY,IAAI,EACF,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,CAAC,CAACC,QAAQ,EAAE,GAC/B,GAAG,GACH,IAAIF,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,CAAC,CAACE,UAAU;IACnC,CAAC;IACD;IACA,MAAMb,QAAQ,CAACc,IAAI,CAAC,SAAS,EAAEN,cAAc,CAAC;IAC9C;IACAb,cAAc,CAAEoB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEjB,OAAO,CAAC,CAAC;IAChDC,UAAU,CAAC,EAAE,CAAC;EAChB;EAEA,SAASiB,kBAAkB,GAAG;IAC5BC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,gBAAgB,CAAC,SAAS,EAAE,UAAShB,CAAC,EAAC;MACzE,IAAGA,CAAC,CAACiB,OAAO,KAAK,EAAE,EAAE;QACnBb,WAAW,EAAE;MACf;IACF,CAAC,CAAC;EACJ;EAEA,oBACE;IAAK,KAAK,EAAE9B,MAAM,CAACY,aAAc;IAAA,wBAC/B;MACE,EAAE,EAAG,UAAU;MACf,KAAK,EAAEZ,MAAM,CAACU,QAAS;MACvB,IAAI,EAAE,CAAE;MACR,WAAW,EAAC,oBAAoB;MAChC,KAAK,EAAEW,OAAQ;MACf,QAAQ,EAAGK,CAAC,IAAKD,aAAa,CAACC,CAAC,CAAE;MAClC,SAAS,EAAE,MAAMa,kBAAkB;IAAG;MAAA;MAAA;MAAA;IAAA,QAC5B,eACZ;MAAQ,OAAO,EAAGb,CAAC,IAAKI,WAAW,CAACJ,CAAC,CAAE;MAAC,KAAK,EAAE1B,MAAM,CAACC,MAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEpD;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,GApDuBe,SAAS;AAAA,KAATA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}